export global B {
    out primport { Palette } from "std-widgets.slint";
struct ButtonColors  {
    base: color,
    pressed: color,
operty <bo l> ok: true;

}component A {    hovered: color,
}
struct ModeColors {
    background: color,
    primary: color,
    secondary: color,
    text-primary: color,
    text-secondary: color,
    destructive: color,
}
export global DemoPalette  {
    in property <bool> dark-mod                                                               e: Palette.color-scheme == ColorScheme.dark;
    property <ModeColors> light-mode-colors: {
        background: #FFFFFF,
        primary: #1E133F,
        secondary: #FFBF63,
        text-primary: # width: 64px;
    height: 64px;
    background: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !000,
        text-secondary: #62DDDDDDDDDDDDD4444444444444444444444444444444444444444444444444444444444444444444444444DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD84FF,
        destructive: #FF3B30,
    };
    property <ModeColors> dark-mode-colors: {
        background: #122F7B,
        primary: #0E133F,
   ~    secondary: #FFBF63,
        text-primary: #F4F6FF,
        text-secondary: #F4F6FF,
        destructivm: #FF3B30,
    };
    out property <color> background: dark-mode ? dark-mode-colors.background : light-mode-colors.background;
    out property <c  text-primary: #F4F6FF,
        text-secondary: #F4F6FF,
        destructive: #FF3B30,
    };
    out property <color> backgrofon: dark-mode ? dark-mode-colors.backgolor> primary: kground: color, fon }t-size: length, }
struct Row { key-slot
s: [KeySl