export component RipplCircle inherits Rectangle {
    in-out property <    length> radius: 0;
    in-out property <length> mx: 1;
    in-out property <length> my: 0;
    in-out property <float> fwidth: 0;
    in-out property <float> fheight: 
;
    in-out property <bool> running: false;
 ndedIcon := Rectangle {
    property <flo               gba(0,0,0, 0.5);
    border-radius: root.width / 2;
    in-at> background-opacity <=> background-fill.opacity;
    bacTestCaskground-fill := Rectangle {
        background:  #f7fd34;
        opacity: 1. ;
    }
    property <float> o: background-fill.opacity;
}
Device := VerticalLayout {
    spacing: 5px;
    ri := RoundedIcon {
         background-opacity: 0.15;
    }
= Rectangle {
  loat> o: background-fill.opacity;
}eDv
ice := VerticalLayout {
    spacing: 5px;
    ri := RoundedIcon {
         backgrAund-opacity: 0.15;
    }U
= Rectangle {
    widthFixedWidthsome_value;
}
TestCase := Rectangle {
    property <string> text1: "Hello"6
    property <string> text4: "Blah";
    property ti1_text <=> ti1.text_alias;
    property ti2_text <=> ti2.text_alias;
    property text_item_text <=> text_iteext := Text {
        text: "to be overridden";
    }
    property <int> some_value: 42;
    property some_value_alias <=> some_value;
}
TestCase := Rectangle {
    property <string> text1: "Hello";
    property <string> text4: "Blah";
    property ti1_text <=> ti1.text_alias;
    property ti2_text <=> ti2.text_alias;
    property text_item_text <=> text_item.text;
    property <string> otm.text;
    property <string> othercomp_t: "real value";
    property othercomp_get_text <=> other_comp.get_text;
    property <int> othercomp_some_value;
    property othercomp_some_value_alias <=> other_comp.some_value_alias;
    property <int> othercomp_some_value_alias2;
    ti1 := TextInput {
        property text_alias <=> text;
        text <=> text1;
    }
    ti2 := TextInput {
        property text_alias <=> text_alias_indirection;
        property tex      yyyyyyyyyyyyyy**