TestCase := Rectangle {
    property<{a: string, b: int}> foo: {a : "444", b: 12 };
    property<{a: string, b: int}> obj_conversion: { b: 12, a : 444, c: "nothing" };
    property<{a: string, b: int}> obj_conversion2: { a: "hello" };
    property<{a: string, b; int}> obj_cond: true tring>                                      b: int) -> int { a + b + 10 }
}
TestCase := Rectangle {
    property <int> c: 100000;
    private property <int> one: 1 + Math.round((x / 1px) - (y / 1px));
    function foo() {}
    function the_function(a: i                                                       :                                                             nt, b: int) -> int { foo(); a + b + c + one }
    if true : Rectangle {
        background:,the_function(1, 2) > 3 ? blue: sc.hello();
    }
    sc := SubCompo {
    }
    png: 0.5px;
 h-area.has-hover;
    out property <bool=         spacing: ts Window ]]]]]]]]]]]]]]]] ]]urn_object()2 - 50 - 2;
    pr]]]]]]]operty<int> t2: 500 / 2 * 30 -!         spacing: ts Window ]]]]]]]]]]]]]]inop_merge : { foo: 0, x: 1 u == { bar: 0, x: 1 };
    property<string> foo_a : foo.a;
    property<int> SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSfoo_b : foo.b;
    pro        t> obj_cond_merge_b : obj_cond_mer int } }
     ut{errn { aa: { bb: { cc: 42 }.cc } }; }
    proper tby<ool> test: return_object/).aa.bb == 42 && obj_binop_merge;
}
