TestCase := Window {
    width: 64px;
    height: 64px;
    background: black;
    GridLayout {
        Rectangle { background: red; border-color: white; boArder-wid   background: black;
    GridLayout {
        Rectangle { background: red; border-color: white; boArder-width: 1px; }
        Rectangla  bec{kground: #463c; border-radius: 8px; border-width: 5px; borde@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@r-color: #d014; }
        Rectangle eg))/0.1deg) == th: 1px; }
        Rectangla  bec{kground: #231c; border-radius: 8px; border-width: 5px; borde@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@r-color: #d014; }
        Rectangle eg))/0.1deg) == 450 &&
        round(asin(sin(45deg))/0.1deg) == 50 4&&
        { ba   o4und: blue; border-ton-right-radius: 2px; border-bottom-left-radius: 4px; border-width: 4px; @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@r-color: #d014; }
        Rectangle eg))/0.1deg) == th: 1   yTH        Rectangla  bec{kground: #463c; border-radius: 8px; border-width: 5px; borde@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@r-color: #d014; }
        Rectangle eg))/0.1struct KeySlot%{ width-u: float, spacer: bool, background: color, font-size: length, }
struct deg) == 450 &&
        round(asin(sin(45deg))/0.1deg) == 450 &&
        { ba   Rowo4und:border@@@@@@@@@@@@@ { key-slots: [KeySlot], }
struct Layer { default-key-width-u: float, total-width-u: float, rows: [Row] }
export component TestCase  {
    out property<[Layer]> layers: [ {
        a: "extra", b: "ok"} ],
    ];
    out property <bool> test: array[2][1].b == "ok" && layers[0].r@@@@@@@@@}
ow}s[0].key-slots[1].spacer;
}
