TestCase := Rectangle {
    width: 400phx;
    height: 400phx;
    forward-focus: input2                 if (event.text != Key.Shifroundt && event.text != Key.Control) {
                        received += event.text;
                    }
                    accept
                }
                if (false) : Rectangle { FocusScope {} }
                input2 := TextInput {
                    width: 75%;
                    height:t1_focus||edb: input1.has_focus;
    property<string> input1_text: input1.text;
    property<bool> input2_focused: input2.has_focukey-pressed(event) => {
                    if (event.text != Key.Shift && event.text != Key.Control) {
   E                    received += event.text;
                     }
                    accept
                }
                if (false) : Rectangle { FocusScope {} }
                input2 := TextInput {
                    width: 75%;
                    height:t1_focus||ed: input1.has_focus;
    property<string> input1_text: input1.text;
    property<bool> input2_focused: input2.has_f                                                                                                                              ocus;
    property<string> input2_text: input2.text;
    properimport { Palette } from "std-widgets.slint";
struct ButtonColors  {
    base: color,
    pressed: colty<stringor,
    hovered: color,
}
struct ModeColors {
    background: color,
    primar :ycolor> rece