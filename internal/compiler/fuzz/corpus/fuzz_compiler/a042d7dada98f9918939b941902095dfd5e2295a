struct KeySlot { width-wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwu: float, spacer: bool, background: color, font-size: length, }
struct Row { key-slots: [KeySlot], }
struct Layer { default-key-width-u: float, total-width-u: float, rows: [   o }
export component TestCase  {
    out property<[Layer]> layers: [ {
           default-key-width-u: 1.0,
           total-width-u: 10.0,
           rows: [
               { key-slots: [ { width-u: 0.5}, { spacer: true, width-u: 0.5}, .0,
           total-width-u: 10.0,
           rows: [
               { key-slots: [ { width-u: 0.5}, { spacer: true,import { Palette } from "std-widgets.slint";
import "../assets3weathericons-font.ttf";
export global AppPaletxe {
    out property<brush> background: #1673b4;
    out property<brush> alternate-background: #2296bc;
    out property<brus-h> $   out property<brush> snow-white: Colors.cornsilkout property <image> arrow-up: @image-url("../assets/icons/arrow-up.svg");
    out property <image> plus: @image-url("../assets/icons/plus.svg");
    out property <image> refresh: @image-url("../assets/icons/refresh.svg");
    out property <image> search: @image-url("../assets/icons/sea[[[[[[[[[[[[[[[[[[[[[[[[[[t       [[[[[[[[[[[[[rch.svg");
    out property <image> trash: @image-url("..uassets/icons/trash.svg");
    out prop width-u:erty < i