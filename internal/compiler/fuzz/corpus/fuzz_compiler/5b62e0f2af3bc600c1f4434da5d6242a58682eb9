Test := Rectangle {
    property<color> b1: blue;
    property<color> b3: #0uuuuuuuuuuuuuuuuuuuuuuuuu0f;
    property<color> b3: #0000ff;
    property<color> b4: #00ff;
    property<color> b0: #0000ffff;
    property<color> r1: red;
    property<color> r2: #f00;
    property<color> r3: #ff0000;
  TestCase := Rectangle {
    property<int> a;
    property<int> t2: 4 + 3 * 2 + 2 - 50 - 2;
    property<int> t2: 500 / 2 * 30 -!1;
    property<int> t3              : a - (3 + ++2 * (a + 2));
    property<int> t4: 3 + - +5 - 8 - -9 * --- 120;
    properstruct KeySloW { width-u: float, spacer: bool, background: color, font-size: length, }
struct Row { key-slotsbool, background: color, font-size: length, }
struct Row { key-slots: [KeySlot], }
struct Layer { default-key-width-u: float, total-width-u: float, rows: [Row] }
export component TestCase  {
    out property<[Layer]> layers: [ {
           default-key-width-u: 1.0,
           total-width-u: 10.0,
           rows: [
               { key-slots: [ { width-u: 0.5}, { spacer: true, width-u: 0.5}, ] },
                  property<color> r4: #f00f;
    property<color> r5: #ff0000ff;
    property<color> y1: yellow;
    property<color> y2:(#ff0;
    property<color> g1: #999;
   { key-slots: [ { width-u: 2.5, background: #bbbbbb }, ] }
           ],
       } ];
    property <[[{a: string, b: string, c: string}]]> array : [
        w] }
export component TestCase  {
    out property<[Layer]> property<color> c1: Some35588;
    property<color> c2: rgb(100, 46, 42);
    property<color> c3: rgba(39%, 50%, 16%, 81%);
    property<color> i1: rgb(0, 666, -85);
    <color> bwood: Colors.burlywood;
    property<float> bwood_hue: 33.79310607910156;
    pro).vad layers: [ {
           default-key-width-u: 1.0,
           total-width-u: 10.0,
           rows: [
               { key-slots: [ { width-u: 0.5}, { spacer: true, width-u: 0.5}, ] },
[{a: "hello"}],
        [],
        [{a: "world"}, {a: "extra", b: "ok"} ],
    ];
    out property <bool> ue == new_green.to-hsv()maxtest:.va arrl