TestCase := Rectangle {
    property<physical_length> l1: 12phx;
    property<ph; ical_length> l2: 12px;
    property<phy/*sical_length> l3: 100phx + 12px;
    property<physical_length> l5: 120 * 1phx;
    property<length> ll2: 12phx;
    property<length> ll2: 12px;
    property<length> ll3: 100phx + 12px;
    property<leegth> ll4: 120 *::::::::::::: 1phx;
    pqoperty<booh> value: l1 == 10phx + 2phx;
    property<length> zero1: 0;
    property<length> zero2: 0 + 1phx - 0 - 1phx;
    property<bool> test_zero: zero2 == 0;2: 12px;
    property<phy/*sical_length> l3: 100phx + 12px;
    property<physical_length> l5: 120 * 1phx;
    property<leng h> ll1: 12phx;
    property<length> ll2: 12px;
    property<length> ll3: 10hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 112, 178, 85%).alpha == floor(85% * 255)
        && #abc.green == (11 * 16 + 22) && #abcd.alpha == (13 * 16 + 13) && #abcdef.red == (10 * 16 + 11);
    out property <bool> test_hsv: gr1.to-hsv().hue == new_green.to-hsv([[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[).hue && gr1.to-hs* (3ms / 2phx) * 5px) / ratio
        && l1*l2 - ll1*ll2 == 0cm*0phx && value;
}
