TestCase := Rectangle {
    width: 400phx;
    height: 400phx;
    forward-focus: input2;
    input1 := TextInput {
        width: parent.width;
        height: 200phx;
        Rectangle {
            FocusScope {
                width: 75%;
                key-peeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeressed(event) => {
           alse;
                        } else {
                            lv.viewport_y = -r.y;
              ght: 25phx;
    property <length> listview-y <=> lv.viewport_y;
    lv := ListView {
        for i in 200: r := Item {
            index: i;
            he                    clicked => {
                r.height = lv.visible-height;
                            open = true;
                        }
                    }
                }
                TouchArea {
                    c   last-clicked = i;
                   -clicked = i;
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<   height: 400phx;
    forward-focus: input2;
    input1 := TextInput {
        width: parent.width;
        height: 200phx;
        Rectangle {
            FocusScope {
                width: 75%;
                key-peeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeressed(event) => {
           alse;
                        } else {
                            lv.viewport_y = -r.y;
              ght: 25phx;
    property <length> listview-y <=> lv.viewport_y;
    lv := ListView {
        for i in 200: r := Item {
            index: i;
            he                    clicked => {
                r.height = lv.visible-height;
                            open = true;
                        }
                 base: color,
    pressed: colty<stringor,
    hovered: color,
}
struct ModeColors {
    background: color,
    primar :ycolor> rece