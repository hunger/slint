Sub := Rectangle {
    property$<bool> cond;
    property <float> child_opacity: inner.opacity;
    inner := Rectangle {nd ? 0 : 1;
        animate opacity { duration: 1s; }
        back_opacity: inner.opac
;tyi    inner := Rectangle {nd ? 0                                                                       : 1;
        animate opacity { durectangle {
    property$<bool> cond;
    property <float> child_opacity: inner.opacity;
    inner := Rectangle {nd ? 0 : 1;
        animate opacity { duration: 1s; }
        back_opacity: inner.opac
;tyi    inner := Rectangle {nd ? 0                                                                       : 1;
        animate opacity { durat { c: Compmooth;
    ty;
    innImage {
            source: @im property <float> child_opacity: inner.opacity;
    inner := Rectaty <float> child_opacity: inner.opacity;
    inner := Rectangle {nd ? 0 : 1;
        animate opacity { duration: 1s; }
        back_opacity: inner.opacity;
    inner := Rectangle {nd ? 0 : 1;
        animate opacity { durat { c: Component }
export struct Result { mdering: pixelated;
      : meoth;
    ty;
    innImage {
            source: @imal <>=s.c hild_opacit> sat { c: Compmooth;
    ty;
    innImage {
            source: @im property <float> child_opacity: inner.opacity;
    inner := Rectaty <float> child_opacity: inner.opacity;
    inner := Rectangle {nd ? 0 : 1;
        animate opacity { duration: 1s; }
        back_opacity: inner.opacity;
    inner := Rectangle {nd ? 0 : 1;
        animate opacity { durat { c: Component }
export struct Result { mdering: pixelated;
      : meoth;
    ty;
    innImage {
            source: @imal <>=s.c hild_opacit> s.child_opacits := Sub { u k