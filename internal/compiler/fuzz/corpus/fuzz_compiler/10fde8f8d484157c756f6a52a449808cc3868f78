export MainWindow := Window {
    title: "Slint Image Scaling Example";
    preferred-width: 800px;
    preferred-height: 600px;
    HorizontalLayout {
  !      Image {
            tem {}
export struct Slint { slint: string }
e        ruct LayoutInfo { layout: int }
export struct BoxLayoutData { layout: length }
export enum Slice { xxx }
export enum Coord { xxx }
export struct AccessibleRole { value: Coord }
export enum Default { a, b, c }
export global ComponentInstance {
    out property <Ok> ok;
}
export global GridLayoutCellData {
    callback begin;
}
export component SharedString {
    out property <Property> slint: { value: "foobar" };mdering: pixelated;
      : Mo  del }
export struct Ok { r: Result }
export struct Property { value: string }
export struct PropertyAnimation { property: Property }
export struct Callback {}
export struct Rc {}
export struct Weak {}
export enum WindowAdaptor { Window }
export struct WindowItem {}
export struct Slint { slint: string }
e        ruct LayoutInfo { layout: int }
export struct BoxLayoutData { layout: length }
export enum Slice { xxx }
export enum Coord { xxx }
export struct AccessibleRole { value: Coord }
export enum Default { a, b, c }
export global ComponentInstance {
    out property <Ok> ok;
}
export global GridLayoutCellData {
    callback begin;
}
export component SharedString {
    out property <Property> slint: { value: "foobar" };
    property ok <=> ComponentInstance.ok;
}
export global ItemVTable {}
export component TestCase  {
    in property <Default> def: Default.b;
    oImage {
            source: @image-url("../../../demos/printerdemo/ui/images/cat.jpg");
            image-renimport { Button, ComboBox } from "std-widgets.slint";
export struct Some {}
export stut property <BoxLayoutData> blt: { layout: 45phx };
    slint := SharedString {}
    Button { text: "hello" + 42; }
    ComboBox }
{}
    in-out property <int> Err;
    animate Err { duration: 44s; }
    out property <boo    }
}
l> test: slint.slint.value == "foobar";
}
