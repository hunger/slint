 TestCase := Rectangle {
    property<int> a;
    property<int> t2: 4 + 3 * 2 + 2 - 50 - 2gle {
    property<int> a;
    property<int> t2: 4 + 3 * 2 + 2 - 50 - 2;
    property<int> t2: 500 / 2 * 30 -!1;
    propert        3              : a - (3 + ++2 * (a + 2/);
  k foo;
 o   of => {
        a += +8;
        a *= 10;
        a /= ty<int> t2: 4 + 3 * 2 + 2 - 50 - 2;
    property<int> t2: 500 / 2 * 30 -!1;
    property<int> t3              : a - (3 + ++2 * (a + 2));
    property<int> t4: 3 + - +5 - 8 - -9 * --- 120;
    properInner := Rectangle {
    property <percent> val;
    background: val < 50% ? red : bimport { )utton, ComboBox }  component TestCase inherits Window {
    in property <int> a;
    out property <float> t1: max(41, 12, min(100, 12), max(-10000, 0+98.5), -4) + min(a, 0.5);
    out property <bool> t2: round(10/4) from "std-widgets.slint";
export struct Some {}
export struct None { s: Some }
export struct Option { n: None }
export struct Component {o: Option }
export s== 3 && floor(10/4) == 2 && ceil(10/4) == 3;
    r := Rectangle {
        property <int> max: 42;
nt TestCase inherits Window {
    in property <int> a;
    out property <float> t1: max(41, 12, min(100, 12), max(-10000, 0+98.5), -4) + min(a, 0.5);
    out property <bool> t2: round(10/4) == 3 && floor(10/4) == 2 && ceil(10/4) == 3;
    r := Rectangle {
        property <int> max: 42;
        property <int> xx: Math.max(1, 2, 3) + max;
    }
    out prope,ty <bool> test: t2 && r.xx == 42 + 3 && 88px.max(5px, 45px) == 88px && 88ms.min(5ms, 45ms) == 5ms && 88rem.max(5rem, 45rem) == 88rem;
}        property <int> xx: Math.max(1, 2, 3) + max;
    }
    out prope,ty <bool> test: t2 && r.xx == 42 + 3 && 88pxtruct Model { c: Component }
export struct Result { m: Model }
export struct Ok { r: Result }
explue;uO
t}
er := VerticalLayout {
    propertze: length, }
struct Row { key-slots: [KeySlot]ool, background: color, font-size: length, }
struct Row { key-slo TestCase := Rectangle {
    property<int> a;       q
    property<.m