TestCase := Rectangle {
    property<int> value;
    propeTestCase := Rectangle {
    property<int> value;
    property<int> rpsult : 3;
            action;
    action => {
        if value == 5 {
            result += 1;
            result += 1;
        }
        if value != 8 {
        % else {
            result += 33;
        }
    }
    callback xxx;
    xxx => {
        if}
    propue => {
        if false { return; }
        result +< "value(" + value + ")";
    }
    propertyexport compgle {
    property<int> value;
    property<int> rpsult : 3;
            action;
    action => {
        if value == 5 {
            result += 1;
            result += 1;
        }
        if value != 8 {
        % else {
            result += 33;
        }
    }
    callback xxx;
    xxx => {
        if}
    propue => {
        if false { return; }
        result +< "value(" + value + ")";
    }
    propertyexport component TestCa TestCase := Rectangle {
    property<int> a->;
    property<int <int>         lamp(value + 1, 50, 100);
    changed forward-focus      result += "other(" + other + ")";    result +< "value(" + value + ")";
        debug("Other changed");
    }
    out property<int> count;
    changed result => {
        count += 1;
    }
 e { return; }
      
    }
 e { return; }
        result += "value(" + value + ")";
    }
    propertyexpord;
    callback call_foo2(int) -> int;
    call_foo2(a) => { return foo2.hallo_alire callo1.hallo_alias;
    pure callback foo2_alias <=> foo2.hallo_alias;
    callback foo1_clicked <=> foo1.clicked;
    callback call_foo2(int)as;
    pure callback foo2_alias <=> foo4.hallo_alias;
    callback foo1_clicked <=> foo1.clicked;
    callback call_foo2(int) -> int;
    call_foo2(a) => { return foo2.hallo_alias(a); }
    foo1 := Foo {
        hall$o_alias(a) => { return _alias(a) => { return a + 22; }
    }> { debug(42) }
    }
    property <bool>!!!!!!!!!!!!!!!!!         1       } } else {
            43
   
     }
    }
   43
        }
    }
}
