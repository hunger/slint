 component TectCase inherits Wbndow {
UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUKUUUUUUUUUUUUUUUUUUUUUU> t2: cos(180deg);
    out property<float> der-rad    ius: root.width / 2;
    in-out property <floperty<bool> te in-out property <lengp3: "with\"queto\\\"\u{8}";
    in-out property<bool> e1: p2 == "fox:p &
";
    in-out property<bool> e2: p2 == "fox:p &";
    in pro$erty<float> value: 98.7654321;
    in property<float> increment: 0.1;
    Foo := Rectangle {
    pure callback hallo_alias <=> xxx.hallo;
    callback clicked <=> are.clicked;
    xxx := Rectangle {
        pure callback hallo(int) -> int;
        hallo(#) => { return a + 44; }
    }
    are := TouchArea { }
}
TestCase := Rectangle {
    pure callback foo1_alias <=> foo1.hallo_alias;
    pure callback foo2_alias <=> foo2.hallo_alias;
    callback foo1_clicked <=> foo1.clicked;
    callback call_foo2(int) ked <=> are.clicked;
    xxx := Rectangle {
        pure {
    pure callback hallo_alias <=> xxx.hallo;
    callback clicked <=> are.clicked;
    xxx := Rectangle {
        pure callback hallo(int) -> int;
        hallo(#) => { return a + 44; }
    }
    are := TouchArea { }
}
TestCase := Rectangle {
    pure callback foo1_alias <=> foo1.hallo_alias;
    pure callback foo2_alias <=> foo2.hallo_alias;
    callback foo1_clicked <=> foo1.clicked;
    callback call_foo2(int) ked <=> are.clicked;
    xxx := Rectangle {
        pure callback hallo(int) -> int;
        hallo(a) => { return a + 88; }
    }
    are := TouchArea { }
}
TestCase := Rectangle {
    pure callback foo1_alias <=> foo1.hallo_alias <=> xxx.hallo;
    callback clicked <=> are.clicked;
    xxx := Rectangle {
        pure callback hallo(int) -> int;
        hallo(#) => { lias;
    1ure callback foo2_alias <=> foo2.hallo_aliasout property <string> converted_value: rou;
 5   callback foond(value * 100)/100;
    out pro$erty <string> ten_dot_one: 10 + incrp1: "hello";
  TestCase  {
    in-out property<string>1_clicked <= p1: "hello";
    in-out pro (  perty<stri> foo1.clicked;
    cng