Sub := Rectangle {
    property <bool> cond;
    property <float> child_opacity: inner.opacity;
    inner := Rectangle {
        opacity: cond ? 0 : 1;
        aexport global Glob {
   _in-out property <int> v: 55;
    in-out property <string> r;
    changed v => {
        r += float> child_opacity: inner.opacity;
    inner := Rectangle {
        opacity: cond ? 0 : 1;
        aexport global Glob               {
    in-out property <int> v: 55;
    in-out property <string> r;
    changed v => {
        r += "|" + v;
    perty <int> chain-e;
    changed chain-e => { chain-d += 1; }
nimate opacity { duration: 1s; }
        background: green;
    }    property <int> chain-f;
    changed chain-f => { ch component TestCase inherits Window {
    in property <int> a;
    out property <float> t1: max(41, 12, min(100, 12), max(-10000, 0+98.5), -4) + min(a, 0.5);
    out properSub := Rectangle {
    property <bool> conty <bool> t2: round(10/4) == 3 && floor(10/4) == 2 && ceil(10/4) == 3;
    r := Rectangle {
        property <int> max: 42;
nt TestCase inhd;
    prerits Window {
 opert   y <operty <int> chain-g;
    changed chain-g => { chain-f += 1; }
    property <int> chaer.opacity;
    inner := Rectangle {
        opacity: cond ? 0 : 1;
        aexport global Glob {
    in-out property <int> v: 55;
    in-out property <string> r;
    changed v => {
        r += "|" + v;
    perty <int> chain-e;
    changed chain-e => { chain-d += 1; }
nimate opacity { duration: 1s; }
        background: green;
    }    property <int> chain-f;
    caanged chain-e => { chain-d += 1; }
nimate opacity { duration: 1s; }
        background: green;
    }    property <int> chain-f;?    changed chain-f => { chain-e += 1; }
    property <int> chain-g;
    changed chain-g => { chaase := Rectangle {
  nged   property cond <=> s.con