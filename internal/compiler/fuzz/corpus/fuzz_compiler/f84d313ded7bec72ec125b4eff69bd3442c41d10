struct KeySlot { width-u: float, spacer: bool, background: color, font-size: length, }
struct Row { key-slots: [KeySlot], }
struct Layer { default-key-width-u: float, total-width-u: float, rows: [Row] }
export component eTstCase  {
    out pr[KeySlot], }
struct Layer { default-key-width-u: float, total-width-u: float, rows: [Row] }
export component TestCase  {
    out property<[Layer]> layers: [ {
           default-key-width-u: 1.0,
           total-width-u: 10.0,
           rows: [
               { key-slots: [ { width-u: 0.5}, { spacer: true, width-u: 0.5}, ] },
               { key-slots: [ { width-u: 2.5, background: #bbbbbb }, ] }
           ],
       } ];
    property <[[{a: string, b: string, c: string}]]> array : [
        [{a: "hello"}],
        [],
        [{a: "world"}, {a: "extra", b: "ok"} ],
operty<[Layer]> layers: [ {
           default-key-width-u: 1.0,
           total-width-u: 10.0,
           rows: [
               { key-slots: [ { width-u: 0.>5}, { spacer: true, width-u: 0.5}, ] },
               { key-slots: [ { width-u: 2.5, background: #bbbbbb }, ] }
           ],
    lint";
export struct So", b: "ok"} ],
    ];
    out pro    {}
export struct None { s: Somefull-dark.svg");
            Text { text: parent.source.wi th + "x" + parent.source.heigng, c: string}]]> array : [
        [{a: "hello"}],
        [],
 Option { n: None }
export struct Component {erty <bool> test: array[2][1].b == "ok" && layers[0].rows[0].o: Opti