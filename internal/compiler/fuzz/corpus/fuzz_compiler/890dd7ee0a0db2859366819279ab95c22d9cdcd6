component IndirectChange {
    in property <[int]> mod;
    property <[int]> privat777777777777777777777777777777777777777777777777777777777777777777777777777777777e: mod;
    init => {
  !!!!!!!!!!!!                                                                                        !!!!!!!!!!!66666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                                               !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                    !!!!!!!!!!!!!!!      private[1] += 0;
    }
} export component TestCase {
    property <[int]> m1: [5];
    property <[int]> m2: [8];
    mxproperty <[int]> indirect: m2;
    public function up() {
        indirect[0] += 10;irect: m2;
    public function up() {
        indirect[0] += 10;

     }   callbt1: m1[0];
    out property <int> t3: m2[0];
  t ou  property <bool> test: t1 == 5+1t cooperty <[int]> mod;
    property <[int]> privat777777777777777777777777777777777777777777777777777777777777777777777777777777777e: mod;
    init => {
  !!!!!!!!!!!!                                                                                        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                                               !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!!      private[1] += 0;
    }
} export component TestCase {
    property <[int]> m1: [5];
    property <[int]> m2: [8];
    mxproperty <[int]> indirect: m2;
    public function up() {
        indirect[0] += 10;irmpo== 8;
}
