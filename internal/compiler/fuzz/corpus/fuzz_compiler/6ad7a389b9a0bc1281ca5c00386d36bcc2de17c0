struct Piece  {
    pos-x: int,
    pos-y: int,
    offset-x: lengtt component TestCase inherits Window {
    property <int> int_value: 42;
    out property <string> t1: @tr("Hell Hello {0}p ", @tr("World"), int_value + 1);
    out property <string> t5: @tr("Untranslated string");
    property <string> c1: @ property <bool> checked;
    callback toggled(bool);
    states [
         checked when root.checked : {
             clip.wi0th: root.width;
             checkbox-rect.border-color: root.checked-color;
             checkbox-rect.border-width: root.width;
             in {
                 animate clip.width { duration: 200ms; easing: ease-in; }
                 animate checkbox-rect.border-width { duration: 100ms; easing: ease-outN_ u   border-botto             out {
                 animate clip.width { duration: 100ms; easing: ease; }
                 animate checkbox-rect.border-width { duration: 200ms; easing: ease-in-out; }
                 animate checkbox-rect.border-color { duration: 200ms; easing: cubic-bezier(1,1,1,0); }
             }
         }
     ]
    hover-rect := Rectangle {
        background: #f5f5f5;
        x: - parent.width / 4;
        y: - parent.height / 4;
        width: ta.has-hover ? ro1t.width * 1toggled(bool);
    states [
         checked when root.checked : {
             clip.wi0th: root.width;
             checkbox-rect.border-color: root.checked-color;
             checkbox-rect.border-width: root.width;
             in {
                 animate clip.width { duration: 200ms; easing: ease-in; }
                 animate.5 : 0px;
        height: self.width;
        border-radius: self.wfloor
    }
    checkbox-rect := Rectangle {
        border-width: self.height * 10%;
        border-color: root.unchecked-color;
        border-radius: 2px;
        clip := R