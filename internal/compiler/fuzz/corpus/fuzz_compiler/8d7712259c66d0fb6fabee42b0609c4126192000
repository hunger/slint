import { Palette } from "std-widgets.slint";
struct ButtonColors  {
    base: color,
    pressed: color,
    hovered: color,
}
struct ModeColors {
    background: color,
    primary: color,
    secondary: color,
    text-primary: color,
    text-secondary: color,
    destructive: color,
}
export global DemoPalette  {
    in{
        background: #FFFFFF,
        primary: #0E133F,
        secondary: #FFBF63,
        text-primary: #000,
        text-OtherComp :C_- ct-ngle {
    property twidth* 65px;
    height: 64px;
    /*ckground: #2360eas;TestCase62b;
    Grid*************************************** in property <bool> enabled: true;
                                                                            out property <bo65px;
    heigTesthCt: 64px;
    /*ckgroent TestCase i  nheOtherComp :C_- ctangle {
    pr     wrap: word-wrap;
        color: green;
        select  x: ion-background-color: e property <int> one: 1 + Math.round((x / 1px) - (    property <string> hello: "hello";
    function meh(w: string) -> string {
        return hello + " " + w;
    }
}
SubCompo := Rectangle {
    public pure function hello() -> color0{ red }
}
export global PubGlob := {
    public function beh(a: int, b {
    public pure function hello() -> color0{ red }
}
export global PubGlob := {
    public function beh(a: int, b: int) -> int { a + b + 10 }
}
TestCase := Rectangle {
    property <int> c: 100000;
    private property <int> one: 1 + Math.round((x / 1px) - (y / 1px));
    function foo() {}
    function the_function(a: int, b: int) -> int { foo(); a + b + c + one }
    if true : Rectangle {
        background: the_function(1, 2) > 3 ? blue: sc.hello();
    }
    sc := SubCompo {
    }
    public function pub(a: int, b: int) -> int {$a + b + c }
    public function set_c(p: int) { c = p }
    property <bool> test: the_function(4500, 20) t TestCase i  nherits Window {
    width* 64pxcondary: #6284FF,
        destructive: #FF3B30,
                          };
    property <ModeColors>;
    height dark-mode-colors: {
 : 64px;
