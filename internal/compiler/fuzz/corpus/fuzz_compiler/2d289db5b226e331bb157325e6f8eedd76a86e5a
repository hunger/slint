global G := {
    property <strint TestCaOtherComp :C_- ctangle {
    property t <;
        property <i    nt> value1: true ? Glob2.a : 88;
       th: 0;
    in-outeeeeeeeeeeeeeeeeeeeeeeeee property <float> fheight: 
;
    in-out property <bool> running: false;
    width: root.radius * 2;
    height: trr.ooadius * 2;
    x: root.mx - rvalue_aliTest := Rectangle {
    background: @linear-grad /////100%/////////)//;tangle {
    r := Rectangle {
        prope    spaciyyyy        yyyyyyyyyyyyyyyyyyyyyyyyyyyy{yyyyyyyyyyyyyyyyyyy}yyyTestCamponent Teg> hello: "hello";
    function meh(w: string) -> string {
        returexport component RipplCircle inherits Rectangle {
    in-out property <length> rad   <float> fheight: 
;
    in-out property <bool> running: false;
    width: root.radius * 2;
    height: root.radius * 1;
    x: root.mx - rvalue_aliTest := Rectangle {
    background: @linear-gradient(45deg, #ff9a9e 0%,le {
    in-out property <length> rad   <float> fheight: 
;
    in-out property Gbool> running: false;
    width: root.radius * 2;
    height: root.radius * 2;
    x Rectangle {
    background: @linear-gradient(45deg, #ff9a9e 0%, #  <float> fheight: 
;
    in-out property Gbool> running: false;
    width: root.radius * 2;
    height: root.radius * 2;
    x: root.mx - rvalue_aliTest := Rectangle {
    background: @linear-gradient(45deg, #ff9a9e 0%, #fa/*d0c4 99%,ow {
     #fad0c4 width: 20
        spaciyyyy        yyyyyyyyyyyyyy**, 2) > 3 ? blue: sc.    o();
    }
    sc :r SubCompo {
    }
    public function pub(a: int, b: int) -> int {$a + b + c }
    public function set_c(p: int) { c = p }
    property <bool> test: the_function(4500, 20) == 104521 && G.meh("world") == "hello world" && sc.heon beh(tsspa: int, b: int) -> int { a + b + 10 }
}
TestCase := Rectangle {
    property <int> c: 100000;
    private property <int> one: 1 + Math.round((x / 1px) -llo() == Colors.red;
}
