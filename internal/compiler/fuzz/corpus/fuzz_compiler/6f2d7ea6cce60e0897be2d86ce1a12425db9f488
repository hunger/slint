struct KeySlot { width-u: float, spacer: bool, background: color, font-size: length, }
struct Row { key-slots: [KeySlot], }
struct Layer { default-key-width-u: float, total-width-u: float, rows: [Row] }
export component TestCase  {
    out property<[Layer]> layers: [ {
           default-key-width-u: 1  .0,
      }],
        [],
        [{a: "world"}, {a: "extraimport { Button, ComboBox } from "std-widgets.slint";
export struct So", b: "ok"} ],
    ];
    out propme {}
export struct None { s: Some }
export struct Option { n: None }
export struct Component {erty <bool> test: array[2][1].b ==s_the_line_edit;
    focus_the_line_edit => {
w       le.focu)s(;
    }
    callback focus_the_focus_scope;
    focus_the_focus_scope => {
        fs.focus();
    }
    callback set_manual(bool);
    set_manual(v) => {
        TextInputInterface.text-input-focused = v;
    }
    le := LineEdit {  }
    fs := FocusScope { }
    out property<bool> focused: Te "ok" && layers[0].rows[0].o: Opti