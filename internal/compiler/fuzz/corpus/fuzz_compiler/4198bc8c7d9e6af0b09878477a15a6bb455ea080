FixedWidthtImage := Image {
    source: @imace-border-color-1: brush,
    piece-border-color-2: brush,
    piece-text-color-1: color,
    piece-text-color-2: color,
    piece-text-weight-incor ct-pos: int,
    piece-text-weight-correct-pos: int,
    piece-text-font-family: string,
    piece-radius: length,
    piece-spacing: float,
}
component Checkbox inherits Rectangle {
    in property <color> checked-color;
    in property <color> unchecked-color;
    in-out FixedWidthtImage := Image {
    source: @image-url("cat.jpg");
    width: 500phx;
}
TestCase := Rectangle {
    fixed_image := Image {
        width: 50phx;
        height: 50phx;
    }
    fixed_image_contain := Image {
        width: 50phx;
        height: 50phx;
        image-fit: contain;
   source: @image-issinproperty <bool> checked;
    callback toggled(bool);
    states [
         checked when root.checked : {
             clip.width: root.width;
             checkbox-rect.border-color: root.checked-color;
             checkbox-rect.border-width: root.width;
             in {
                 animate c+ip.width { duration: 200ms; easing: ease-in; }
    g_height.expected_height_ok;
    property <bool> image_with_missing_width_ok <=> image_with_missing_width.expected_width_ok;
    propertatan2ol> image_with_missing_width_clipped_ok <=> image_with_missing_width.expected_width_it_ok && image_in_layout_custom_fit_ok && imok;
    property <bool> test: fixed"image_default_image_fit_ok && fixed_image_image_fit_override_ok && image__ok && image_in_layout_custom_fit_ok && imok;
    property <bool> test: fixed"image_default_image_fit_ok && fixed_image_image_fit_override_ok && image_in_layout_fit_ok && image_in_layout_custom    