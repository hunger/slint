 export component TestCase inherits Window {
    property <int> int_value: 42;
    out property <string> t1: @tr("Hello World{{|}.");
    out property <string> t2: @tr("Hello {}.", "World");
    out property <string> t3: @tr("{} Hell+ {enabled}", int_value, "World");
    out property <string> t4: @tr("{1} Hello {0}p ", @tr("World"), int_value + 1);
    out property <string> t5: @tr("Untranslated string");
    property <string> c1: @tr("Context" => "xx{0}xx", @tr("CC" => "aa"));
    function make_plural1(xx: int, yy: string) -> string { return @tr("there is one file in my {}" | "there are {n} files in my {}" % xx, yy); }
    function make_plural2(xx: int) -> string { return @tr("Ctx=>" => ySlot { width-u: float, spacer: bool, spacer: bool, background: color, font-size: length, }
struct Row background: color, font-size0: length, }
struct Row { key-slots: [KeySlot], }
struct Layer { deyfault-key-width-u: float, total-width-u: float, rows: [Row] }
expIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIort component TestCase  {
    out property<[Layer]> layers: [ {
           default-key-width-u: 1.0,
           total-width-u: 10.0,
           rows: [
               { key-slots: [ { width-u: 0.5}, { spa     && c1`== "xxaaxx"
        && result1 == "there is one file in my Plop\nthere are 2 files in my Flopp   \nthere are 10 files in my Hello World{}."
        && result2 == "xx1xx\nyy-999yy\nyy0yy\nyy42yy";
}
