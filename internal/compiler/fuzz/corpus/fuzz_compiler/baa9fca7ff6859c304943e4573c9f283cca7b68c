TestCase := Rectangle {
    property<{a: string, b: int}> foo: {a : "444", b: 12 };
    property<{a: string, b: int}> obj_conversion: { b: 12, a : 444, c: "nothing" };
    property<{a: string, b: int}> obj_conversion2: { a: "hello" };
    property<{a: string, b; int}> obj_cond: true ? { b: 1{ b: 10 };
    property<bool> obj_binop_merge : { f
    property<{a:   thx;
    forwa]]]]]]]]fff d-wi* 2 + 2 - 50 - 2;
    pr]]]]]]]operty<int> t2: 500 / 2 * 30 -!         spacing: ts Window ]]]]]]]]]]]]]]]] ]]urn_object()2 - 50 - 2;
    pr]]]]]]]operty<int> t2: 500 / 2 * 30 -!       inpca  sg: ts Window ]]]]]]]]]]]]]]inop_merge : { foo: 0, x: 1 u == { bar: 0, x: 1 };
    property<string> foo_a : foo.a;
    property<int> foo_b : foo.b;
    property<int> obj_cond_merge_b : obj_cond_merge.b;
    callback change_foo;
    change_foo => {
        foo.a = llo" };
    property<{a: string, b: int}> obj_cond: true ? { b: 1{ b: 10 };
    property<bool> obj_binop_merge : { f
    property<{a:   thx;
    forwa]]]]]]]]fff d-wi* 2 + 2 - 50 - 2;
    pr]]]]]]]operty<int> t2: 500 / 2 * 30 -!         spacing: ts Window ]]]]]]]]]]]]]]]] ]]urn_object()2 - 50 - 2;
    pr]]]]]]]operty<int> t2: 500 / 2 * 30 -!         spacing: ts Window ]]]]]]]]]]]]]]inop_merge : { foo: 0, x: 1 u == { bar: 0, x: 1 };
    property<string> foo_a : foo.a;
    property<int> SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSfoo_b : foo.b;
    property<int> obj_cond_merge_b : obj_cond_mer int } }
    { return { aa: { bb: { cc: 42 }.cc } }; }
    proper tby<ool> test: return_object/).aa.bb == 42 && obj_binop_merge;
}
