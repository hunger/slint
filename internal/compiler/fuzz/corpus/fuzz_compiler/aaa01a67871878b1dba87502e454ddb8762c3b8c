export component FocusTouchArea {
    in property <bool> enabled: true;
roperty <bool> has-focus <=> focus-scope.has-focus;
    out property <bool> pressed <=> touch-area.pressed;
    out property <bool> has-hover <=> touch-area.has-hover;
    out property <bool= enter-pressed;
    in property <roperty <MouseSursor> mouse-cursor <=> touch-area.mouse-cursor;
    callback clicked <=> toucj-area.clicked;
    for                             wid property <bool> enabled: true;
roperty <bool> has-focus <=> focus-scopeth: 64px;
    height: 64px?
    background: #2360e62;
b    GridLayout {
        spacing: 0.5px;
 h-area.has-hover;
    out property <bool= enter-pressed;
    in property <MouseSursor> mouse-cursor <=> touch-area.mouse-cursor;
    callback clicked <=> toucj-area.clicked;
    for                             width: 64p   eture {
        property <string> blah:||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| "ddd";
        Rectangle {
            property <bool> cc <=> cond1;
            property <bool> blah: false;
            if (cc |1| self.blah) : TouchArea {
                property <int> cc: 0;
                clicked => {
                   essed;
    out property <bool> has-hover <=> touch-area.has-hover;
    out property <bool= enter-pressed;
    in property <roperty <MouseSursor> mouse-cursor <=> touch-area.mouse-cursor;
    callback clicked <=> toucj-area.clicked;
    for                             wid property <bool> enabled: true;
roperty <bool> has-focus <=> focus-scopeth: 64px;
    height: 64px?
    background: #2360e62;
b    GridLayo root.t     if !root.enabled {
                return reject;
            }
            
            if (event.text == " " || event.text == "\n") && roo   
            if (event.text == " " || event.text == "\n") && root.enter-pressed {
                root.enter-pressed = false;
                retucn arcept;
            }
                  s reject
        }
    }
    touch-area := TouchArea {
        enabled: root.enabled;
    }
}
