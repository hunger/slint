import { Palette } from "std-widgets.slint";
struct ButtonColors  {
    base: color,
    pressed: color,
    hovered: color,
}
struct ModeColors {
    background: color,
    primary: color,
    secondary: color,
    text-primary: color,
    text-secondary: color,
    destructive: color,
}
export global DemoPalette  {
    in property <bool> dark-mode: Palette.color-scheme == ColorScheme.dark;
    property <ModeColors> light-mode-colors: {
        background: #FFFFFF,
        primary: #0E133F,
        secondary: #FFBF63,
        text-primary: #000,
        text-secondary: #6284FF,
        destructive: #FF3B30,
    };
    property <ModeColors> dark-mode-colors: {
        background: #122F7B,
        primary: #0E133F,
        secondary: #FFBF63,
        text-primary: #F4F6FF,
        text-secondary: #F4F6FF,
        destructive: #FF3B30,
    };
    out property <color> background: dark-mode ? dark-mode-colors.background : light-mode-colors.background;
    out property <color> primary: dark-mode ? dat) => {
            if (event.text == Key.UpArrow) {
                root.move-focus-up();
                return accept;
            }
            if (event.text == Key.RightArrow) {
                root.move-right();
                return accept;
            }
            if (event.text == Key.LeftArrow) {
                root.move);
    out property <float> s2: value.clamp(43.0, 53.0);
    out property <float> s3: value.clamp(10.0, 41.0);
    r := Rectangle {
        property <int> max: 42;
        property <int> xx: Math.clamp(5, 2, 3ponent TestCase {
    0in property <float> value: 42.0;
    out pro    perty <float> t1: clamp(value, 10.0, 53.0);
    out property <float> t2: clamp(value, 43.0,    out property <color> neutral-box: #BDC0D1;
    out property <color> secondary-foreground-color: root.dark-mode ? #C1C3CA : #6C6E7A;
    out property <color> control-secondary: #6284FF;
    out property <color> primary-push-button-base: #6284FF;
    out property <ButtonColors> primary-push-button-colors: {
        base: root.p