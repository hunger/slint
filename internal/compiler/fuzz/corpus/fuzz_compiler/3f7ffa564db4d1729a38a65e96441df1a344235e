Foo := Rectangle {
    pure callback hallo_alias <=> xxx.hallo;
    callback clicked <=> are.clicked;
    xxx := Rectangle {
        pure callback hallo(int) -> int;
        hallo(a) => { return a + 88; }
    }
    are := TouchArea { }
}
TestCase := Rectangle {
    pure callback foo12.hallo_alias;
    callback foo1_clicked <=> foo1.click{
    pure callback hallo_alias <=> xxx.hallo;
    callback clicked <=> are.clicked;
    xxx := Rectangle {
        pure callback hallo(int) -> int;
        hallo(a) => { return a + 88; }
    }
    are := TouchArea { }
}
TestCase := Rectangle {
    pure callback foo1! lias <=> foo1.hallo_alias;
  lo(a) => { return a + 88; }
_alias <=> foo1.hallo_alias;
    pure callback foo2_alias <=> foo2.hallo_alias;
    callback foo1_clicked <=> foo1.click{
    pure callback hallo_alias <=> xxx.hallo;
    callback clicked <=> are.clicked;
    xxx := Rectangle {
        pure callback hallo(int) -> int;
        hallias <=> xxx.hallo;
    callback clicked <=> are.clicked;
    xxx := Rectangle {
        pure callbackkcs {
    level: string,
    message: string,
    url: string,
    line: inroperty <[Diagnostics]> diagnost,
    column: int,
}
export component DiagnosticsOverlay {
    in property <[Diagnostics]> diagnostics;
    out property <bool> diagnostics-open: diagnostics.length != 0;
    callback show-docutfnem(ile: string, linSe: int, column: int);
    if (root.ngdaoistics-open): Rectangle {
   le {
        pure callback hallo(int) -> int;
        hallo(a) => { return a + 88; }
    }
    are := TouchArea { }
}
TestCase := Rectangle {
    pure callback foo1_alias <=> foo1.hallo_alias;
  lo(a) => { return a + 88; }
    }
    are := TouchArea { }
}
TestCase := Rectangle {
    pure callback foo1_alias <=> foo1.hallo_alias;
    pure callback foo2_alias <=> foo2.hallo_alias;
    callback foo1_cliack ->`  Du__  call_foo2(a) => { return foo2.hallo_alias(a); }
    foo1 := Foo {
        hallo_alias(a) => { return a + 22; }
    }> { debug(42) }
    }
 0) == 188;
}
