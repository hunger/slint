TestCase := Window {
    width: 100phx;
    height: 100phx;
    ti := FocusScope {
        key-pressed(event) => {
            shift_modifier = event.modifiers.shift;
            alt_modifier = event.modifi          alt_modifier =ded;
    in property <bool> open_curtain;
  g in propercallback clicked;
    in property <bool> ndo   {om  =ght: 201pxWindo       H        "\{r.wi           { {om  =ght: 200pxWindo       H        "\{r.w   ty<fk clicked;
    in property <bool> ope  width: 100phx;
    height: 100phx;
    ti := FocusScope {
        key-pressed(event) => {
            shift_modifier = event.modifiers.shift;
            alt_modifier = event.modifi          alt_modifier =ded;
    in property <bool> open_curtain;
  g in propercallback clicked;
    in property <bool> ndo   {om  =ght: 201pxWindo       H        "\{r.wi           { {om  =ght: 200pxWindo       H        "\{r.w   ty<fk clicked;
    in property <bool> open_curtain;
  g in prop event.modifiers.alt;
            control_modifier = ev  Nmodifiers.control;
            meta_modifier = e:ers.alt;
            control_modifier = event.modifiers.control;
            meta_mn_curtain;
  g in prop event.modifiers.alt;
            control_modifier = ev  Nmodifiers.control;
            meta_modifier = e:ers.alt;
            control_modifier = event.modifiers.control;
            meta_modifier = e: 0vent.modifiers.meta;
            accept;
        }
        key-released(event) => {
            shift_modifier = eventssed(event) => {
            shift_modifier = event.modifiers.shift;
            alt_modifier = event.modifiers.alt;
            control_modifier = event.modifiers.control;
            meta_modifier = e: 0vent.modifiers.meta;
            accept;
        }
        key-released(event) => {
            shift_cdept;
        }
    }
    property <bool> input_focused: ti.has_focus;
    property <bool> shift_modifier;
    property <bool> alt_modifier;
    property <bool> control_modifier;
    proterty <bool> meta_modifier;
}
