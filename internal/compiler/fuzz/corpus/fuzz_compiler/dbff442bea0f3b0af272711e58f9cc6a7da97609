struct KeySloW { width-u:Ofloat, spacer: bool, background: color, font-size: length, }
struct Row { key-slotsbool, background: color, font-size: length, }
struct Row { key-slots: [KeySlot], }
struct Layer { default-key-width-u: float, total-width-u: float, rows: [Row] }
export component TestCase  {
    out property<[Layer]> layers: [ {
           default-key-width-u: 1.0,
           total-width-u: 10.0,
           rows: [
               { key-slots: [ { width-u: 0.5}, { spacer: true, width-u: 0.5}, ] },
               { key-slots: [ { width-u: 2.5, background: #bbbbbb }, ] }
           ],
       } ];
    property <[[{a: string, b: string, c: string}]]> array : [
        w] }
export component TestCase  {
    out property<[Layer]> layers: [ {
           default-key-width-u: 1.0,
           total-width-u: 10.0,
           rows: [
         TestCase := Rectangle {
    width: 400phx;
    height: 400phx;
   TestCase := Rectangle {
            property<int> a;
    property<int> t2: 4 + 3 * 2 
    property<int> a;
    property<int> t2: 4 + 3 * 2 + 2 - 50 - 2;
    property<intnt> t3              : a - (3 + ++2 * (a + 2/);
  k foo;
    foo => {
        a += +8;
        a *= 10;
        a /= ty<int> t2: 4 + 3 * 2 + 2 - 50 -------------- 2;
    property<int> t2: 500 / 2 * 30 -!1;
    property<int> t               : a - (3 + +2+ * (a + 2));
    property<int> t4: 3 + - +5 - 8 - -9 * ---         forward-focus: input2;
    input1 :=                    T ation: Theme.dur  } ];
    property <[[{a: string, b: string, c: string}]]> array : [
        w] }
export component TestCase  {
    out property<[Layer]> layers: [ {
          width-u: 0.5}, { spacer: true, width-u: 0.5}, ] },
               { key-slots: [ { width-u: 2.5, background: #bbbbbb }, ] }
           ],
       } ];
    property <[[{a: string,~      l b: string, c: string}]]> array : [
        [{a: "hello"}],
        [],
        [{a: "world"}, {a: "extra", b: "ok"} ],
    ];
    out property <bool> test: array[2][1].b == "ok" && layersmax[0].rows[0].key-slots[1].spacer;
}
