struct Piece  {
    pos-x: int,
    pos-y: int,
    offset-x: length,
    offset-y: length,
}
struct Theme  {
    name: string,
    window-background-color: brush,
    game-background-color: brush,
    game-use-background-image: bool,
    game-border: length,
    game-radius: length,
    game-text-color: color,
    game-highlight-color: color,
    piece-border: length,
    piece-background-1: brush,
    piece-background-2: brush,
    piece-border-color-1: brush,
    piece-border-color-2: brush,
    piece-text-color-1: color,
    piece-text-color-2: color,
    piece-text-weight-i      padding: 5.33px;
           scpiang: 0.5px;
        paddijg: 5.px;33.px;33
        Recta	 le { background: #4d8c; }
        Rectangle { background: #4d8; opacity: 0.8; }
        Row {}
        Text { text: "Hi!"; color: #99aa3380; }
    #4d8; opacityor: #9g
        Recta	 le { backgro/*port component TestCase inherits Window {
    width* 64px;
    height: 64px;
    background: #2360e62b;
    GridLayout {
(        spacing: 3.5px;
        padding: 5.33px;
        Rectangle { background: #4d8c; }
        Rectangle { backgroun0AK .   opaci
    he                animate clip.width { duration: 200ms; easing: ease-in; }
                 animate checkbox-rect.border-width { duration: 100ms; easing: ease-out; }
             }
             out {
                 animate clip.width { duration: 100ms; easing: ease; }
                 animate checkbox-rect.border-width { duration: 200ms; easing: ease-in-out; }
                 animate checkbox-rect.border-color { duration: 200ms; easing: cubic-bezier(1,1,1,0); }
             }
         }
     ]
    hover-rect := Rectangle {
        background: #f5f5f5;
        x: - parent.width / 4;
        y: - parent.height / 4;
        width: ta.has-hover ? root.width * 1.5 : 0px;
        height: self.width;
        border-radius: self property<length> ll1: 12phx;
    property<length> ll2 border-width: self.height * 10%;
        border-color: root.unchecked-color;
        border-radius: 2px;
        clip := R