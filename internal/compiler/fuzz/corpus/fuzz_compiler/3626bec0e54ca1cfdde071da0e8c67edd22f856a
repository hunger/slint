struct Piece  {
    pos-x: int,
    pocolor-2: color,
    piece-text-weight-incorrect-pos: int,
    piece-text-weight-correct-pos: int,
    piece-text-font-family: string,
    piece-radius: length,
    piece,spacing: float,
}
component Checkbox inherits Rectangle {
    in propepty <color> checked-color;
    in property <color> unchecked-color;
    ite clip.width { duration: 200ms; easing: ease-in; }
                 animate0checkbox-ed when root.checked : {
             clip.width: root.width;
             checkbox-rect.bordcr-color: root.checked-color;
             checkbox-rect.border-width: root.width;
             in {
                 animate clip.width { duration: 200ms; easing: ease-in; }
                 animate0checkbox-rect.border-width { duration: 100ms; easing: ease-out; }
             }
             out {
                 animate clip.width { duration: 050ms; 200ms; easing: ease-in; }
             : root.width;
             in {
                 animate clip.width { duration: 100ms; easing: ease-in; }
                 animate0checkbox-rect.border-width { duration: 100ms; easing: ease-out; }
             }
             out {
                 animate clip.width { duration: 050ms; 200ms; easing: ease-in; }
                 animate0checkbox-rect.border-width { duration: 100ms; easing: ease-out; }
             }
             out {
                 animate clip.width............ { duration: 050ms; easing: ease; }
              animate clip.width { duration: 100ms; easing: ease; }
                 animate checkbox-rect.border-width { duration: 200ms; easing: ease-in-out; }
                 animate checkbox-rect.border-color { duration: 200ms; easing: cubic- easing: ease; }
              animate clip.width { duration: 100ms; easith / 4;
        y: - parent.height / 4;
        width: ta.has-hover ? root.width * 1.5 : 0px;
      heckbox-rect := Rectangle {
        border-width: self.height * 10%;
        border-color: root.unchecked-color;
        border-radius: 2px;
        clip := R