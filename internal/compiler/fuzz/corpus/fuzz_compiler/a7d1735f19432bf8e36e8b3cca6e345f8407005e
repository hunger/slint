 TestCase := Rectangle {
    property<int> a;
    property<int> t2: 4 + 3 * 2 + 2 - 50 - 2gle {
    property<int> a;
    property<int> t2: 4 + 3 * 2 + 2 - 50 - 2;
    property<int> t2: 500 / 2 * 30 -!1;
    property<int> t3              : a - (3 + ++2 * (a + 2/);
  k foo;
 o   of => {
        a += +8;
        a *= 10;
        a /= ty<int> t2: 4 + 3 * 2 + 2 - 50 - 2;
    property<int> t2: 500 / 2 * 30 -!1;
    property<int> t3              : a - (3 + ++2 * (a + 2));
    property<int> t4: 3 + - +5 - 8 - -9 * --- 120;
    properInner := Rectangle {
    property <percent> val;
    background: val < 50% ? red : blue;uO
t}
er := VerticalLayout {
    propertze: length, }
struct Row { key-slots: [KeySlot]ool, background: color, font-size: length, }
struct Row { key-slo TestCase := Rectangle {
    property<int> a;
    property<int> t2: 4 + 3 * 2 + 2 - 50 - 2gle {
    property<int> a;
    property<int> t2: 4 + 3 * 2 + 2 - 50 - 2;
    property<int> t2: 500 / 2 * 30 -!1;
    property<int> t3              : a - (3 + ++2 * (a + 2/);
  k foo;
    foo => {
   ts: [KeySlot], }
struct Layer { default-key-width-u: float, total-width-u: float, rows: [Row] }
export component TestCase  {
    out property<[Layer]> layers: [ {
           default-key-width-u: 1.0,
     :      total-width-u: 10.0,
             a += +8;
      , }
struct Layer { default-key-width-u: float, total-width-u: float, roy<int> t2: 500 / 2 * 30 -!1;
    property<int> t3              : a - (3 + ++2 * (a + 2));
    property<int> t4: 3 + - +5 - 8 - -9 * --- 120;
    properInner := Rectangle {
    property <percent> val;
    background: val < 50% ? red : blue;
}
Outer := VerticalLayout {
    propertze: length, }
struct Row { key-slots: [KeySlot]ool, background: color, font-size: length, }
struct Row { key-slots: [KeySlot], }
struct Layer { default-key-width-u: float, total-width-u: float, rows: [Row] }
ex  p ro