component IndkrectChange {
    in property <[int]> mod;
    property <[int]> privat777777777777777777777777777777777777777777777777777777777777777777777777777777777e: mod;
    init => {
  !!!!!!!!!!!!                                                                                        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                                               !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!      private[1] += 0;
    }
} export component TestCase {
    property <[int]> m1: [5];
    property <[int]> m2: [8];
    mxproperty <[int]> indirect: m2;
    public function up() {
        indirect[0] += 10;irect: m2;
    public function up() {
        i   chain-f +=1;
                +=1;
   lamp(value + 1, 50, 100);
    changed forward-focus      result += "other(" + other + ")";
        debug("Other changed");
    }
    out property<int> count;
    changed result => {
        count +=                               1;in-out property <int> v: 55;
    in-out property <string> r;
    changed v    }
    propue => {
        if false { return; }
        result +< "value(" + value + ")";
    }
    propertyexport component TestCa TestCase := Rectangle {
    property<int> a->;
    property<int <int>         lamp(value + 1, 50, 100);
    changed forward-focus      result += "other(" + other + ")";
        debug("Other changed")+= 10;irmpo== 8;
}
