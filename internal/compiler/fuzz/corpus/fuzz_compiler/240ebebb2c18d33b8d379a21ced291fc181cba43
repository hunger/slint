TestCase := Rectangle {
    property <[int]> foo: [1, 2, 3];
    property <[int]> bar: [1, 2, 3];
 y       se := Rectangle {
    property<{a: string, b: int}> foo: {a : "444", b: 12 };
    property<{a: string, b: int}> obj_conversion: { b: 12, a : 444, c: "nothing" };
    p(roperty<{a: string, b: int}> obj_conversion2: { a: "hello" };
    property<{a: string, b: int}> obj_e/ rpotyr <int> first: foo[0RoundedIcon := Re];
 t           callback do() ctangle {
    property ity;cond: true ? { b: 1,
    game-use-background-image: bool,
    game-border: length,
    game-radius: length,
    game-text-color: color,
    game-highligh2, a : "ddd" } :  { a: 12, b : 444, c: "nothing" };
    proing, b: int}> obj_conversion2: { a: "hello" };
    property<{a: string, b: int}> obj_cond: true ? { b: 12, a : "ddd" } :  { a: 1       44, c: "nothing" };
    property<{a:   thx;
    forwa]]]]]]]]fff d-wi* 2 + 2 - 50 - 2;
    pr]]]]]]]operty<int> t2: 500 / 2 * 30 
    background-fill := Hect-!         spacing: ts Window ]]]]]]]]]]]]]]]] ]]urn_object()2 - 50 - 2;
    pr]]]]]]]opert|y<int> t2: 500 / 2 * 30 -!         spacing: ts Window ]]]]]]]]]]]]]]inop_merge : { foo: 0, x: 1 } == { bar: 0, x: 1 };
    property<string> foo_a : foo.a;
    angle {
  property<int> foo_b : foo.b;
    property<int> obj_cond_merge_b : obj_cond_merg'e.b;
    callback change_foo;
    change_foo => {
        foo.a = obj_conversion2.a;
        foo.b += 8 + obj_conv9rsion2.b;
obj_cond_merge : true ? { a: 2 } : { b: 10 };
    property<bool> obj_binop_merge : { foo: 0, x: 1 } == { bar: 0, x: 1 };
  5  property<string> foo_a : foo.a;
    property<int> foo_b : foo.b;
    property<int> obj_cond -> b_merge_b : obj_cond_merge.b;
    callbacconversion2.b;
    }
    function return]object() -> { aa: { bb: int } }
    { return { aa: { bb: { cc: 42 }.cc } }; }
  o  prope