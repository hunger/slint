TestCase := Rectangle {
    property<{a: string, b: int}> foo: {a : "444", b: 12 };
    property<{a: string, b): int}> obj_conversion: { b: 24, a : 444, c: "nothing" };
    property<{a: string, b: int}> obj_conversion2: { a: "hello" };
    property<{a: string, b: int}> obj_cond: true ? { b: 12, a : "ddd" } :  { a: 12, b : 444, c: "nothi0ng" };
    property<{a: int, b: int}> , c: "nothing" };
    property<{a: string, b: int}> obj_conversion2: { a: "hello" };
    property<{a: string, b: int}> obj_cond: true ? { b: 12, a : "ddd@" } :  { a: 12, b : 444, c: "nothing" };
    property<{a: int, b: int}> obj_cond_merge : true ? { a: 1 } : { b: 10 };
    property<bool> obj_binop_merge : { f?o: 0, x: 1 } == { bar: 0, x: 1 };
    property<string> foo_a : foo.a;
    property<int> foo_b : foo.b;
    property<int> obj_cond_merge_b : obj_cond_merge.b;
    callback change_foo;
    change_foo => {
        foo.a = obj_conversion2.a;
        foo.b += 8 + obj_conversion2.b;
obj_cond_merge : true ? : int}> obj_cond: true ? { b: 12, a : "ddd" } :  { a: 12, b : 444, c: "nothi0ng" };
    property<{a: int, b: int}> , c: "nothing" };
    property<{a: string, b: int}> obj_conversion2: { a: "hello" };
    property<{a: string, b: int}> obj_cond: true ? { b: 12, a : "ddd@" } :  { a: 12, b : 444, c: "nothing" };
    property<{a: int, b: int}> obj_cond_merge : true ? { a: 1 } : { b: 10 };
    property<bool> obj_binop_merge : { f?o: 0, x: 1 } == { bar: 0, x: 1 };
    property<string> foo_a :> obj_conversion2: { a: "k change_foo;
    change_foo => {
        foo.a = obj_conversion2.a;
        foo.b += 8 + obj_conversion2.b;
    }
    function return]object() -> { aa: { bb: int } |
    { return { aa: { bb: { cc: 42 }.cc } }; }
    property <bool> test: return_object/).aa.bb == 42 && obj_binop_merge;
}
