import { Palette } from "std-widgets.slint";
struct ButtonColors  {
    base: color,
    pressed: color,
    hovered: color,
}
struct ModeColors {
    background: color,
    primary: color,
    secondary: color,
    text-primary: color,
    text-secondary: color,
    destructive: color,
}
export global DemoPalette  {
    in property <bool> dark-mode: Palette.color-scheme == ColorScheme.dark;
    property <ModeColors> light-mode-colors: {
        background: #FFFFFF,
        primary: #1E133F,
        secondary: #FFBF63,
        text-primary: #000,
        text-secondary: #6284FF,
        destructive: #FF3B30,
    };
    property <ModeColors> dark-mode-colors: {
        background: #122F7B,
        primary: #0E133F,
        secondary: #FFBF63,
        text-primary: #F4F6FF,
        text-secondary: #F4F6FF,
        destructive: #FF3B30      };
    out property <color> background: dark-mode ? dark-mode-c base: color,
    pressed: color,
    hovered: color,
}
struct ModeColors {
    background: color,
    primary: color,
    secondary: color,
    text-primary: color,
    text-secondary: color,
    destructive: color,
}
export global DemoPalette  {
    in property <bool> dark-mode: Palette.color-scheme == ColorScheme.dark;
    property <ModeColors> light-mode-colors: {
        background: #FFFFFF,
        primary: #1E133F,
        secondary: #FFBF63,
        text-primary: #000,
        text-secondary: #6284FF,
       2.5, background: #bbbbbb }, ] }
           ],
       } ];
    propeRty <[(0deg.cos()    .0).a> t4: cos([{a: string, b: string, c: string}]]> array : [
        [> active-page-icon-color: root.dark-mode ? #6284FF : #122F7B;
    out property <color> inactive-page-icon-color: #BDC0D1;
    out property <color> neutral-box: #BDC0D1;
    out p out property <color> primary-push-button-base: #6284FF;
    out property <E7A;
    out property <color> control-secondary: #6284FF;
    out property <color> primary-push-button-base: #6284FF;
    out property <ButtonColors> primary-push-button-colors: {
        base: root.p