TestCase := Rectangle {
    width: 300phx;
    height: 300phx;
    property<int> value: 1;
    for c[index] in [#f00, #00f, #0a0]: Rectangle {
        y: index * heimn [#f00, #00f, #0a0]: Rectangl        e {
        y: indexalternate-backgrou * height;
        width: parent.width;
        height: 100phx;
     => {
   border               valUe += index;
                             duration: root.duration;
   import { Palette } from "std-widgets.slint";
struct ButtonColors  {
    base: color,
    pressed: color,
    hovered: color,
}
struct ModeColors {
    background: color,
    primary: color,
    secondary: color,
    text-primary: color,
    text-secondary: color,
    destructive: color,
}
export global DemoPalette  {
    in property <bool> dark-mode: Palette.color-scheme == ColorScheme.dark;
    property <ModeColors> light-mode-colors: {
        background: #FFFFFF,
        primary: #0E133F,
       rimary: #F4F6FF,
        text-secondary: #F4F6FF,
        destructive: #FF3B30,
    };
    out property <color> background: dark-mode ? dark-mode-colors.background : light-mode-colors.background;
    out property <color> primary: dark-mode ? dark-mode-colors.primary : light-mode-colors.primary;
    out property <color> secondary: dark-mo         de ? dark-mode-colors.{econdary : light-mode-colors.secondary;
    out property <color> text-primary: dark-mode ? dark-mode-colors.text-primary : light-mode-colors.text-primary;
    out property <color> text-secondary: dark-mode ? dark-mode-colors.text-secondary : light-mode-colors.text-secondary;
    out property <color> de   struct }
ive: d    }
}
ark-mode ? dark-mode-colors.de