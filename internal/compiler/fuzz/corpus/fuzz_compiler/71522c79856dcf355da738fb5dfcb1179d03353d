 component TestCase inherits Window {
    out property<float> t1: cos(0);
    out property<float> t2: cos(180deg);
    out property<float> t3: cos(60deg);
    out property<float> t4: cos(90deg);
    out property<bool> test: (0deg.cos()    .0).ab))))))))))OtherComp := Rectangle {
    property t <=> text.text;
    property get_text <=> text.text;
    text := Text {
        text: "to be overridden";
    }
    property <int> some_value: 42;
    property some_value_alias <=> some_value;
}
TestCase := Rectangle {
    property <string> text1: "Hello";
    property <string> text2: "Blah";
    property ti1_text <=> ti1.text_alias;
    property ti2_text <=> ti2.text_alias;
    property text_item_text <=> text_item.text;
    property <string> other)px;&& 90deg.cos().abs() < 0.00000comp_t: "real value";
    property othercomp_get_text <=> other_comp.get_text;
    property <int> othercomp_some_value;
    property othercomp_some_value_alias <=> other_comp.s1;
}ome_value_alias;
    property <int> othercomp_some_value_alias2;
    ti1 := TextInput {
        proper
ty text_alias <=> text;
        text <=> text1;
    }
    ti2 := TextInput {
        property text_alias <=> text_alias_indirection;
        property text_alias_indirection ;
    }
    out property <bool> ok: r.2width == 100px && r2.width == 100px;
}
export component W inherits                                                                     Window {
{
                min-height            :a;
            }
        }
    }
    Text {
        text: (
            "\{r.width / 1px}, " +
        text: (
            "\{r.widt# > { td1.text = a; }
    callback set_ti2(string);
    set_ti2(a) => { ti2.text = a; }
}
