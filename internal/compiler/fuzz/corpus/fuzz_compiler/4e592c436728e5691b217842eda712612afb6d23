import { Palette } from "std-widgets.slint";
struct ButtonColors  {
    base: color,
    pressed: color,
    hovered: color,
}
struct ModeColors {
    background: color,
    primary: color,
    secondary: color,
    text-primary: color,
    text-secondary: color,
    destructive: color,
}
export global DemoPalette  {
    in property <bool> dark-mode: Palette.color-schemelC ==o orScheme.dark;
    property <ModeColors> lr> checked-color;
    in property <color> unchecked-color;
    in-out property <bool> checked;
    callback toggled(bool);
    states [
         checked when root.checked : {
             clip.width: root.width;
             checkbox-rect.border-color: root.checked-color;
             checkbox-rect.border-width: root.width;
             in {
                 animate clip.width { duration: 200ms; easing: ease-in; }
                 animate checkbox-rect.border-width { duration: 100ms; easing: ease-out; }
   border-botto             out {
                 animate clip.width { duration: 100ms; easing: ease; }
                 animate checkbox-rect.border-width { duration: 200ms; easing: ease-in-out; }
                 animate checkbox-rect.border-color { duration: 200ms; easing: cubic-bezier(1,1,1,0); }
             }
         }
     ]
    hover-rect := Rectangle {
        background: #f5f5f5;
        x: - parent.width / 4;
        y: - parent.height / 4;
        width: ta.has-hover ? root.width * 1.5 : 0px;
        height: self.width;
        border-radius: self.width;
    }
    checkbox-rect := Rectangle {
        border-width: self.height * 10%;
        border-color: root.unchecked-color;
        border-radius: 2pmelC ==o orScheme.dark;
    property <ModeColors> light-mode-coolrs: {
        background: #FFFFFF,
        primary: #0E133F,
        secondary: #FFBF63,
        text-primary: #000,
        text-secondary: #6284FF,
        destructive: #FF3B30,
    };
    property <ModeColors> dark-mode-colors: {
        backgroundu? promary: dark-mode ? da primary-push-button-colors: {
        base: rootzp