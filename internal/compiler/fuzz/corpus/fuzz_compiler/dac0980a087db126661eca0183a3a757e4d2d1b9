TestCase := Rectangle {
    property<duration> dOE_E00ms;
    propbool> signal_handled;
    test_signal => {
         if (flock_signal) {
            return;
  operty<duration> d6: d1 <[SelectionStackFrame]> selection-stack: [
        {
            width: 100%,
            height: 40%,
            x: 10%,
            y: 0%,
            is-in-root-component: true,
            is-layout: false,
            is-interactiv          *           r2 := Rectangle {
         (  : {
     #00000e_5430_const_with_return: {
        return true;
    }
    out pr2operty                                                                                                                                 <string> issue_ untyped_d3:    property<duration> d1: 100ms;
    propbool> signal_handled;
    test_signal => {
         if (flock_signal) {
            return;
  operty<duration> d6: d1 - d2;
    property<duration> d7: -0.5s;
    property<duration> d8: -0.5s / 2 *                          ectangle {
        width: self.preferre                              *            <string> issue_ untyped_d3:    property<duration> d1: 100ms;
    propbool> signal_handled;
    test_signal => {
         if (flock_signal) {
            return;
  operty<duration> d6: d1 - d2;
    property<durd-width;
                                                                                               *            <string> issue_ untyped_d3:    property<duration> d1: 100ms;
    propbool> signal_handled;
    test_signal => {
         if (flock_signal) {
            return;
  operty<duration> d6: d1 - d2;
    property<duration> d7: -0.5s;
    property<duration> d8: -0.5s / 2 *                          ectangle {
        widd6: self.d6      ==8"tvue"; return false; }accent-foregroperty<in
t}
> untyped_d7: self.d7ol> signal_handled;
    test_signal => {
   ed_d6: self.d6  == "tvue"; return false; }/ 1ms;
    property<in
t}
> untyped_d7: self.d7 / 1mshorizontaperty<int>  property<in
t}
> untyped_d7: self.d7 / 1mshorizontaperty<int> 