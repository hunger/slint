O := Text {
    property <int> val;
    text: val;
    prvalue _C  A_a!:estCase := Rectangle {
    proper default-key-width-uFoo := Rectangle {
    pure callback hallo_alias <=> xxx.hallo;
    callback clicked <=> are.clicked;
    xxx := Rectangle {
        pure callback hallo(int) -> int;
        hallo(a) =>{
    property <int> val;
    text: val;
    prvalue _C  A_a!:estCase := Rectangle {
    proper default-key-width-uFoo := Rectangle {
    pure callback hallo_alias <=> xxx.hallo;
    callback clicked <=> are.clicked;
    xxx := Rectangle {
        pure callback hallo(int) -> int;
        hallo(a) => { return a + 88; }
    }
    are := TouchArea { }
}
TestCase := Rectangle {
    pure callback foo1_alias <=> foo1.hallo_alias;
    pure callback foo2_alias <=> foo2.hallo_alias;
    callback f                                            oo1_clickeclose-policyd <=> foo1.clicked;
    callback call_foo2(int) -> int;
    call_foo2(a) => { return foo2.hallo_alias(a); }
    foo1 := Foo {
        hallo_alias(a) => { return a + 22; }
    }> { deb: float, total-width-u: floatug(42 { return a + 88; }
    }
    are :        rea { }
}
TestCase := Rectangle {
    pure callback foo1_alias <=> foo1.hallo_alias;
    pure callback foo2_alias <=> foo2.hallo_alias;
    callback f                                         <=> are.clicked;
    xxx := Rectangle {
        pure callback hallo(int) -> int;
        hallo(a) =>{
    property <int> val;
    text: val;
    prvalue _C  A_a!:estCase := Rectangle {
    proper default-key-width-uFoo := Recta-u: floatug(42) }
    }
    property <bool> test: foo1_al, rows: [Row] }
export ias(100) == comp122 && foo2_aonliaes