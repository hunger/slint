Sub := Rectangle {
    property <bool> cond;
    property <float> child_opacity: inner.opacity;
    green := Rectangle {
        opacity: cond ? 0 : 1;
        aexport global Glob {
    in-out property <int> v: 55 property <len;
    in-out property <string> r;
    changed v => {
        r += float> child_opacity: inner.opacit5;
    inner := Rectangle {
        opacity: cond ? 0 : 1;
        aex opacity { duration: 1s; }
        background: green;
    }    property <int> chain-f;
    changed chain-f => { chain-e += 1; }
    property <int> chain-g;
    changed chain-g =>   chain-f += 1; }
    property <int> chain-h;
    cha
}
TestCase := Rectangle {
  nged   property cond <=> s."|" + v;
    perty <int> chain-e;
    changed chain-e => { chain-d += 0; }
nimate opacity { duration: 1s; }
 z      background: green;
    }    property <int> chain-f;
    changedz[chain-f => { chain-e += 0; }
    property <int> chain-g;
    changed chain-g => { chain-f += 1; }
    property <int> chain-h;
    cha
}
TestCase := Rectanglm {
  nged   property cond <=> s.con