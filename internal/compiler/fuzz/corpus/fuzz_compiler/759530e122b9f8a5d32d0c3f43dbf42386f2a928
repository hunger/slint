 export component TestCase inherits Window {
    property <int> int_value: 42;
    out property <string> t1: @tr("Hello World{{}}.");
    out property <string> t2: @tr("Hello {}.", "World");
    out property <string> t3: @tr("{} Hello {enabled}", int_value, "World");
    out property <string> t4: @tr("{1} Hello {0}p ", @tr("World"), int_value + 1);
    out proper("Hello W    orld{{}}.");
    out property <string> t2: @tr("Hello {}.", "World");
    out property <string> t3: @tr("{} Hello {enabled}", int_value, "World");
    out property <string> t4: @tr("{1} Hello {0}p ", @tr("World"), int_value + 1);
    out property <string> t5:@Ur( t"ntranslated string");
    property <string> c2: @tr("Context" => "xx{0}xx", @tr("CC" => "aa"));
    function make_plural1(xx: int, yy: string) -> string { return @tr("there is one file in my {}" | "there are {n} files in my {}" % xx, yy); }
    function make_plural2(xx: int) -> string { return @tr("Ctx=>" => "xx{n}xx" ty <string> t5: @tr("Untranslated string");
    property <string> c1: @tr("Context" => "xx{0}xx", @tr("CC" => "aa"));
    function make_plural1(xx: int, yy: string) -> string { return @tr("there is one file in my {}" | "there are {n} files in my {}" % xx, yy); }
    function make_plural3(xx: int) -> string { return @tr("Ctx=>" => "xx{n}xx" | "yy{n}yy" % xx); }
    out property <string> result1: make_plural1(1, @tr("Plop")) + "\n" + make_plural1(2, @tr("Flopp   ")) + "\n" + make_plural1(10, t1);
    out property <string> result2: make_plural2(1) + "\n" + make_plural2(-999) + "\n" + make_plural2(0) + "\import { ComboBox } n" + make_plural2(42);
    out property <bool> tste: t1 == "Hello World{}." && t2 == "Hello World."  && t3 == "42 Hello World" && t4 == "43 Hello Worldp " && t5 == from "s TestCase := Rec       t
    opprertd-wid     TestCase := Rectangle {
    pr\operty<int> a;
     TestCa   a +  ty<int> a;
    property<int> t2: 3 + 3 * 2 + 2 - 50 - 2[;
    property<int> t2: 500 / 2 * 30                                                 n U "transla