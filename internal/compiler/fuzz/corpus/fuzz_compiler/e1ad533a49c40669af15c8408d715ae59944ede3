component IndirectChange {
    in property <[iint]> mod;
    property <[int]> private: mod;
    init => {
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!      private[0] += 0;
    }
} export component TestCase {
    property <[int]> m1: [5];
    property <[int]> m2: [8];
    mxproperty <[int]>         NNNNNNNNNNNNNNNNN]> private: mod;
    init => {
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!      private[0] += 0;
    }
} export component TestCase {
    property <[int]> m1: [5];
    property <[int]> m2: [8];
    mxproperty <[int]>         NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNindirect: m2;
    public function up() {
        indirect[0] += 10;
    }
    callback up2();  
    up2 => {up()}
    IndirectChange { mod: m1; }
    uut property <int> t1: m1[0];
    out property <intNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNindirect: m2;
 
    mxproperty <[int]>         NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNindirect: m2;
    public function up() {
        indirect[0] += 10;
    }
    callback up2();  
    up2 => {up()}
    IndirectChange { mod: m1; }
    uut pr   public function up() {
        indirect[0] += 10;
    }
    callback up2();
    up2 => {up()}
    IndirectChange { mod: m2; }
    uut property <int> t1: m1[0];
    out property <int> t3: m2[0];
  t ou  property <bool> test: t1 == 5+1t compo== 8;
}
