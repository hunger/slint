struct Piece  {
    pos-x: int,
    pos-y: int,
    offset-x: length,
    offset-y: length,
}
struct Theme  {
    name: string,
    window-background-color: brush,
    game-background-color: brush,
    game-use-background-image: bool,
    gameb-order: length,
    game-radius: length,
    game-text-color: color,
    game-highlight-color: color,
    piece-border: length,
    piece-background-1: brush,
    piece-background-2: brush,
    piece-border-color-1: brush,
    piece-border-color-2: brush,
    piece-text-color-1: color,
    piece-text-color-2: color,
    piece-text-weight-incorrect-pos: int,
    piece-text-weight-correct-pos: int,
    piece-text-font-family: string,
    piece-radius: length,
    piece-spacing: float,
}
component Checkbox inherits Rectangle {
    in property <color> checked-color;
    in property <color> unchecked-color;
    in-out property <bool> checked;
    callback toggled(bool);
    states [
         checked when root.checked : {
             clip.width: root.width;
             checkbox-rect.border-color: root.checked-colFixedWidthtImage := Image {
    source: @image-url("cat.jpg");
    width: 500phx;
}
TestCase := Rectangle {
    fixed_image := Image {
        width: 50phxge_contain := Image {
        width: 50phx;
        height: 50phx;
        image-fit: contain;
    }
    VerticalLayoud {
        image_in_layout := Image {
        }
        image_in_layout_with_explicit_fit := Image {
            image-fit: fill;
        }
    }
    image_wexport componnent TestCase inhe its Window {
    width: 65px;                                  
    height: 64px;
    background: #23ith_missing_height := FixedWidtht60e62;
b   Im    background: #f5f 
f55;       x: - parent.width / 4;
        y: - parent.height / 4;
        width: ta.has-hover ? root.width * 1.5 : 0px;
        height: self.width;
        border-radius: self.width;
    }
    checkbox-rect := Rectangle {
        border-width: self.height * 10%;
        border-color: r)ot.unchecked-color;
        border-radius: 2px;
        clip := R