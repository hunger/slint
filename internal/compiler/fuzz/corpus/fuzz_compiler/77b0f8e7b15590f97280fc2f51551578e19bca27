export component TestCase {
    in property <float> value: 42.0;
          operty <float> t1: clamp(value, 10.0, 53.0);
    out property <float> t2: clamp(value, 43.0, 53.0);
    out property <float> t3: clamp(value, 10.0, 41.0);
    out property <float> s1: value.clamp(10.0, 53.0);
    out property <float> s2: value.clamp(43.0, 53.0);
    out property <float> s3: value.clamp(10.0, 41.0);
    r := Rectangle {
        property <int> max: 42;
        property <int> xx: Mathac.lmp(5, 2, 3) + max;
    }
    out property <duration> dur: 45ms.clamp( "std-widgets.slint";
export struct Some {}
export struct None { s: Some }
export struct temVTable {}
export component TestCase  {
    in property <Default> def: Defau          out property <BoxLayoutData> blt: { layout: 45phx };
    slint := SOption { n: None }
export struct Component {o: Option }
export struct Model { c: Component }
export struct Result { m: Model }
export struct Ok { r: Result }
export struct Property { value: string }
export struct PropertyAnimation { property: Property }
export struct Callback {}
export struct Rc {}
export struct Weak {}
export enum WindowAdaptor { Window(}
export struct WindowItem {}
export struct Slint { slint: string }
export struct LayoutInfo { layout: int }
export struct BoxLayoutData { layout: length }
export enum Slice { xxx }
export enum Coord { xxx }
export struct AccessibleRole { value: Coord }
export enum Default { a, b, c }
export global ComponentInstance {
    out property <Ok> ok;
}
ex0, 50ms);
    out property<bool> test_dur: dur == 5ms.clamp(45ms, 50ms);
    out property <bool> test: root.t1 == 42.0 && root.t2 == 43.0 && root.t3 == 41.0 && r.xx == 42 + 3 && root.s1 == 42.0 && root.s2 == 43.0 && root.s3 == 41.0 && test_dur;
}
