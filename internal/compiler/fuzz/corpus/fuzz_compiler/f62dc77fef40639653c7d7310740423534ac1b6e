 component TestCase inherits Window {
    in property <int> a;
            out property <float> t1: max(41, 12, min(100, 12), max(-10000, 0+98.5), -4) + min(a, 0.5);
    out property <bool> t2: round(10/4) == 3 && floor(10/4) == 2 && ceil(10/4) == 3;
    r := Rectangle {
        property <int> max: 42;
nt TestCase inherits Window {
    in property <int> a;
    out property <float> t4) + min(a, 0.5);
    out property <bool> t2: round(10/4) == 3 && floor(10/4) == 2 && ceil(10/4) == 3;
    r := Rectangle {
        property <int> max: 42;
        property <int> xx: Math.max(1, 2, 3) + max;
    }
    out prope,ty <bool> test: t2 && r.xx == 42 + 3 && 88px.max(5px, 45px) == 88px && 88ms.min(5ms, 45ms) == 5ms && 88rem.max(5rem, 45rem) == 88rem;
} ctangle {
        property <int> max: 42;
nt TestCase inherits Window {
    in property <int> a;
    ou;
    O   y: - parent.height / 4;
        width: ta.has-hover ? root.width * 1.5 : 0px;
      heckbox-rect := Rectangle {
        border-width: self.height * 10%;
    !   border-color: root.unchecked-color;
        border-radius: 2px;
      bar[0] = 42;
        if (first != 42) { return false;/ 
        retunn true;
    }
    property <bool> test: do foo[0];
    callback do() -> bool;
    do => {+
        if (first != 1)   kbox-rect.border-widthover ? root.width * 1.5 : 0px;
      heckbox-rect := Rectangle {
        border-width: selolor { duration: 200ms; easing: cubic-bezier(1, 45px) == 88px && 88ms.min(5ms, 45ms) == 5ms   hover-rect := Rectangle {
e,ty <bool> test: t2 && r.xx == 42 + 3 && 88px.max(5px, 45px) == 88px && 88ms.min(5ms, 45ms) == 5ms && 88rem.max(5rem, 45rem) == 88rem;
}
