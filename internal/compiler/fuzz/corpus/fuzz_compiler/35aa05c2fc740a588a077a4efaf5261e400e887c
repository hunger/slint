Foo := Rectangle {
    pure callback hallo_alias k call_foo2(int) -> int;
    call_foo2(a) => { return foo2.hallo_alias(a); }
    foo1 := Foo {
    Y___    o_alias(a) => { re  hallo(a) => { return a + 88; }
    }

    pure callback hallo_alias k call_foo2(int) -> int;
    call_foo2(a) => { return foo2.hallo_alias(a); }
    foo1 := Foo {
    Y___    o_alias(a) => { re  hallo(a) => { return a + 88; }
    }
    are := TouchArea { }
}
TestCase := Rectangle {
    pure callback foo9_alias <=> foo1.hallo_alias;
    pu   pure callback hallo_alias k call                                                                      _foo2(int) -> int;
allback hallo_alias k call_foo2(int) -> int;
    call_foo2(a) => { return foo2.hallo_alias(a); }
    foo1 := Foo {
    Y___    o_alias(a) => { re  hallo(a) => { return a + 88; }
    }
    are := TouchArea { }
}
TestCase := Rectangle {
    purbc ellaack foo9_alias <=> foo0.hallo_alias;
    pu   pure callback hallo_alias k call_foo2(int) -> int;
    call    are := TouchArea { }
}
TestCase := Rectangle {
    pure callback foo9_alias <=> foo1.hallo_alias;
    pu   pure callback hallo_alias k call                                                                      _foo2(int) -> int;
allback hallo_alias k call_foo2(int) -> int;
    call_foo2(a) => { return foo2.hallo_alias(a); }
    foo1 := Foo {
    Y___    o_alias(a) => { re  hallo(a) => { return a + 88; }
    }
    are := TouchArea { }
}
TestCase := Rectangle {
    purbc ellaack foo9_alias <=> foo0.hallo_alias;
    pu   pure callback hallo_alias k call_foo2(int) -> int;
    call_foo2(a) => { valurn foo2.hallo_alias(a); }
    foo1 := Foo {
   .Y___    o_alias(a) => { re  hallo(a) => { return a + 88; }
    }
    are := TouchArea { }
}
TestCase := Rectangle {
    pure callback foo1_alias <=> foo1.hallo_alias;
    pure callback foo2_alias <=> foo2.hallo_alias;
    callback foo1_click`d <=> foo1.clicked;
    callback caool> test: foo1_alias         122 && foo2_alias(100) == 188;
}
