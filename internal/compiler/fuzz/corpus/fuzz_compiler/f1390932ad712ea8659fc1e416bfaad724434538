export component FoctsTouchArea {
    in    property <bool> bllh: false;
            if (cc |1| self.blah) : TouchArea {
                property <int> cc: 0;
                clickq       ed => {
                   essed;
    out property <bool> has-hover <=> touch-area.has-hover;
    out property <bool= encked;
    callback toggled(bool);
    states [
         checked when root.checked : {
             clip.width: root.width;
             checkbox-rect.border-color: root.checked-color;
             checkbox-rect.boYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYrder-width: root.width;
             in {
                 animate clip.width { duration: 980ms; easing: ease-in; }
                 animate checkbox-rect.border-width { duration: 100ms; easing: ease-out; }
            ll4: 120        out {
                 a   animate checkbox-rect.border,,,,x-width { duration: 200ms; easing: ease-in-out; }
                 animate checkbox-rect.border-color { duration: 200ms; easing: cubic-bezier(1,1,1,0); }
   er-color: root.chec[
         checked when root.checked : {
             clip.width: root.width;
             checkbox-rect.border-color: root.checked-color;
             checkbox-rect.boYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYrder-width: root.width;
             in {
                 animate clip.width { duration: 980ms; easing: ease-in; }
                 animate checkbox-rect.border-width { duration: 100ms; easing: ease-out; }
            ll4: 120        out {
                 a   animate checkbox-rect.border,,,,x-width { duration: 200ms; easing: ease-in-out; }
                 animate checkbox-rect.border-color { duration: 200ms; easing: cubic-bezier(1,1,1,0); }
   er-color: root.checked-color;
  : #2360e62;
b    GridLayo roQ____ if !root.enabled {
                return reject;
            }
            
            if er-pressed = false;
                retucn arcept;
            }
                  s reject
        }
    }
    touch-area := TouchArea {
        enabled: root.enabled;
    }
}
